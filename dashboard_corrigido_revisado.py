import streamlit as st
# Senha correta
SENHA_CORRETA = "acesso123"

# Inicializa estado de autentica√ß√£o
if "autenticado" not in st.session_state:
    st.session_state["autenticado"] = False

# Fun√ß√£o para validar senha e marcar autentica√ß√£o
def validar_senha():
    if st.session_state["senha_digitada"] == SENHA_CORRETA:
        st.session_state["autenticado"] = True
    else:
        st.session_state["erro_autenticacao"] = True

# Se n√£o autenticado, mostra tela de senha
if not st.session_state["autenticado"]:
    st.title("üîê Acesso Restrito")

    # Campo de senha com chave ligada ao estado
    st.text_input("Digite a senha:", type="password", key="senha_digitada", on_change=validar_senha)

    # Mostra erro se necess√°rio
    if st.session_state.get("erro_autenticacao", False):
        st.error("Senha incorreta.")
        st.session_state["erro_autenticacao"] = False  # reseta para sumir no pr√≥ximo loop

    st.stop()
    
import pandas as pd
import numpy as np
import plotly.express as px
from datetime import datetime
from io import BytesIO

# Mapeamento manual de meses para portugu√™s
meses_pt = {
    'Jan': 'Jan', 'Feb': 'Fev', 'Mar': 'Mar', 'Apr': 'Abr',
    'May': 'Mai', 'Jun': 'Jun', 'Jul': 'Jul', 'Aug': 'Ago',
    'Sep': 'Set', 'Oct': 'Out', 'Nov': 'Nov', 'Dec': 'Dez'
}

st.set_page_config(page_title="Dashboard de Sinistralidade", layout="wide", initial_sidebar_state="expanded")

# Estilo azul nos filtros e calend√°rio em portugu√™s
st.markdown("""
    <style>
    .stMultiSelect [data-baseweb="tag"] {
        background-color: #1f77b4 !important;
        color: white !important;
    }
    .stMultiSelect [data-baseweb="tag"] .remove-button {
        color: white !important;
    }
    .stMultiSelect [role="option"]:hover {
        background-color: #d0e3f3 !important;
    }
    .stDateInput, .stDateInput input {
        direction: ltr;
        text-align: left;
    }
    .st-emotion-cache-1wmy9hl {
        font-family: "Segoe UI", sans-serif;
    }
    </style>
""", unsafe_allow_html=True)

# Fun√ß√µes
def calcular_indicadores(df):
    df["Sinistralidade"] = df["Despesa"] / df["Receita"]
    df["Frequ√™ncia"] = (df["OS"] * 12) / df["Itens"]
    df["Markup"] = (1 - 0.0615) / df["Sinistralidade"]
    return df

def exportar_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name="Dados Filtrados")
    output.seek(0)
    return output

def obter_markup_politica(row, politica_df):
    politicas_produto = politica_df[politica_df["Produto"] == row["Produto"]]
    politicas_validas = politicas_produto[politicas_produto["Itens"] >= row["Itens"]]
    if not politicas_validas.empty:
        return politicas_validas.sort_values("Itens").iloc[0]["Markup Pol√≠tica"]
    return np.nan

def calcular_markup_politica(row, politica_df, produto_filtro):
    if produto_filtro == "Todos":
        return np.nan
    else:
        return obter_markup_politica({"Itens": row["Itens"], "Produto": produto_filtro}, politica_df)

# Leitura da base principal
df = pd.read_excel("Base Final.xlsx")
df["Refer√™ncia"] = pd.to_datetime(df["Refer√™ncia"])
df["Per√≠odo Formatado"] = df["Refer√™ncia"].dt.strftime("%b/%Y").apply(lambda x: meses_pt.get(x[:3], x[:3]) + x[3:])
df = calcular_indicadores(df)

# Navega√ß√£o
pagina = st.sidebar.radio("üìå Navega√ß√£o", ["Resumo e Evolu√ß√£o", "An√°lise de Markup"])

# Upload da pol√≠tica
st.sidebar.title("üìÅ Pol√≠tica de Markup")
st.sidebar.caption("üìå Esta base ser√° usada para comparar os dados reais com os valores ideais de markup.")
base_politica = st.sidebar.file_uploader("Upload da Pol√≠tica (.xlsx)", type="xlsx")
if base_politica:
    politica = pd.read_excel(base_politica)
    politica["Produto"] = politica["Produto"].astype(str)
    politica["Itens"] = politica["Itens"].astype(int)
else:
    politica = pd.DataFrame(columns=["Produto", "Itens", "Markup Pol√≠tica"])

# === P√ÅGINA 1 ===

if pagina == "Resumo e Evolu√ß√£o":
    st.subheader("üìà Evolu√ß√£o Mensal do Markup")
    st.caption("‚ÑπÔ∏è Se nenhum valor for selecionado, todos os dados ser√£o considerados.")

    colg1, colg2 = st.columns(2)

    # Filtro de Seguradora com multiselect (estilo chips azuis)
    seguradoras_disponiveis = sorted(df["Seguradora"].unique())
    filtro_seg = colg1.multiselect("Filtrar Seguradora (Gr√°fico)", options=seguradoras_disponiveis, default=[])

    # Produto permanece como selectbox (com "Geral" como padr√£o)
    filtro_prod = colg2.selectbox(
        "Filtrar Produto (Gr√°fico)",
        options=sorted(df["Produto"].unique()),
        index=sorted(df["Produto"].unique()).index("Geral")
    )

    # Aplica filtros ao dataframe
    df_agg = df.copy()
    if filtro_seg:
        df_agg = df_agg[df_agg["Seguradora"].isin(filtro_seg)]
    df_agg = df_agg[df_agg["Produto"] == filtro_prod]

    # Cria colunas de per√≠odo formatado
    df_agg["Per√≠odo Formatado"] = df_agg["Refer√™ncia"].dt.strftime("%b/%Y").str.capitalize()
    df_agg["Per√≠odo Ordenado"] = df_agg["Refer√™ncia"]

    # Agrega os dados por m√™s
    df_agg = df_agg.groupby(["Per√≠odo Formatado", "Per√≠odo Ordenado"]).agg(
        Receita=('Receita', 'sum'),
        Despesa=('Despesa', 'sum'),
        Itens=('Itens', 'sum')
    ).reset_index()

    # Calcula indicadores
    df_agg["Sinistralidade"] = df_agg["Despesa"] / df_agg["Receita"]
    df_agg["Markup"] = (1 - 0.0615) / df_agg["Sinistralidade"]
    df_agg["Markup Pol√≠tica"] = np.nan

    # Calcula linha de Markup Pol√≠tica, se houver pol√≠tica carregada
    if not politica.empty:
        df_agg["Markup Pol√≠tica"] = df_agg.apply(lambda row: calcular_markup_politica(row, politica, filtro_prod), axis=1)

    # Ordena por per√≠odo
    df_agg = df_agg.sort_values("Per√≠odo Ordenado")

    # Gr√°fico de linha com plotly
    fig = px.line(df_agg, x="Per√≠odo Formatado", y="Markup", title="Evolu√ß√£o do Markup")
    if not df_agg["Markup Pol√≠tica"].isna().all():
        fig.add_scatter(
            x=df_agg["Per√≠odo Formatado"],
            y=df_agg["Markup Pol√≠tica"],
            mode='lines+markers',
            name='Markup Pol√≠tica',
            line=dict(dash='dash', color='red')
        )
    st.plotly_chart(fig, use_container_width=True)

    # Indicadores num√©ricos
    df_filtro_resumo = df.copy()
    if filtro_seg:
        df_filtro_resumo = df_filtro_resumo[df_filtro_resumo["Seguradora"].isin(filtro_seg)]
    df_filtro_resumo = df_filtro_resumo[df_filtro_resumo["Produto"] == filtro_prod]
    qtd_meses_resumo = df_filtro_resumo["Refer√™ncia"].nunique()

    receita_total = df_filtro_resumo["Receita"].sum()
    despesa_total = df_filtro_resumo["Despesa"].sum()
    receita_media = receita_total / qtd_meses_resumo if qtd_meses_resumo else 0
    despesa_media = despesa_total / qtd_meses_resumo if qtd_meses_resumo else 0
    sinistralidade_media = despesa_total / receita_total if receita_total else 0
    markup_medio = (1 - 0.0615) / sinistralidade_media if sinistralidade_media else 0

    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Receita M√©dia Mensal", f"R$ {receita_media:,.2f}")
    col2.metric("Despesa M√©dia Mensal", f"R$ {despesa_media:,.2f}")
    col3.metric("Sinistralidade M√©dia", f"{sinistralidade_media:.2%}")
    col4.metric("Markup M√©dio", "---" if np.isinf(markup_medio) or np.isnan(markup_medio) else f"{markup_medio:.2f}")

# === P√ÅGINA 2 ===
elif pagina == "An√°lise de Markup":
    st.title("üßÆ An√°lise Detalhada de Markup por Produto (M√©dia Mensal)")

    # Prepara coluna de per√≠odo formatado
    df["Per√≠odo Formatado"] = df["Refer√™ncia"].dt.strftime("%b/%Y").str.capitalize()

    with st.sidebar:
        st.markdown("### üéõÔ∏è Filtros")
        st.caption("‚ÑπÔ∏è Se nenhum valor for selecionado, todos os dados ser√£o considerados.")

        # Novo filtro de per√≠odo com visual padr√£o multiselect
        periodos_disponiveis = sorted(df["Per√≠odo Formatado"].unique(), key=lambda x: datetime.strptime(x, "%b/%Y"))
        periodo_selec = st.multiselect("Per√≠odo", options=periodos_disponiveis, default=[])

        seguradora_selec = st.multiselect("Seguradora", sorted(df["Seguradora"].unique()), default=[])
        produto_selec = st.multiselect("Produto", sorted(df["Produto"].unique()), default=[])
        segmento_selec = st.multiselect("Segmento", sorted(df["Segmento"].unique()), default=[])
        novo_prod_selec = st.multiselect("Novo Produto?", df["Novo Produto?"].dropna().unique().tolist(), default=[])

    # Aplica filtros
    df_filtro = df.copy()

    if periodo_selec:
        df_filtro = df_filtro[df_filtro["Per√≠odo Formatado"].isin(periodo_selec)]
    if seguradora_selec:
        df_filtro = df_filtro[df_filtro["Seguradora"].isin(seguradora_selec)]
    if produto_selec:
        df_filtro = df_filtro[df_filtro["Produto"].isin(produto_selec)]
    if segmento_selec:
        df_filtro = df_filtro[df_filtro["Segmento"].isin(segmento_selec)]
    if novo_prod_selec:
        df_filtro = df_filtro[df_filtro["Novo Produto?"].isin(novo_prod_selec)]

    qtd_meses_filtro = df_filtro["Refer√™ncia"].nunique()
    df_filtro = calcular_indicadores(df_filtro)

    df_detalhado = df_filtro.groupby(
        ["Seguradora", "Produto", "Segmento", "Novo Produto?"]
    ).agg(
        Receita=("Receita", "sum"),
        Despesa=("Despesa", "sum"),
        OS=("OS", "sum"),
        Itens=("Itens", "sum")
    ).reset_index()

    df_detalhado[["Receita", "Despesa", "OS", "Itens"]] /= qtd_meses_filtro
    df_detalhado = calcular_indicadores(df_detalhado)
    df_detalhado["Markup"] = df_detalhado["Markup"].replace([np.inf, -np.inf], np.nan)

    if not politica.empty:
        df_detalhado["Markup Pol√≠tica"] = df_detalhado.apply(lambda row: obter_markup_politica(row, politica), axis=1)
    else:
        df_detalhado["Markup Pol√≠tica"] = np.nan

    df_detalhado["Gap Markup"] = df_detalhado["Markup"] - df_detalhado["Markup Pol√≠tica"]
    df_detalhado["Alerta"] = df_detalhado.apply(
        lambda row: "N√£o Calculado" if pd.isna(row["Markup"]) or pd.isna(row["Markup Pol√≠tica"]) else
                    "‚ùå Muito Abaixo" if row["Gap Markup"] <= -2 else
                    "‚ö†Ô∏è Abaixo" if -2 < row["Gap Markup"] <= -0.5 else
                    "‚úîÔ∏è Dentro" if -0.5 < row["Gap Markup"] < 0.5 else
                    "‚ö†Ô∏è Acima" if 0.5 <= row["Gap Markup"] < 2 else
                    "‚ùå Muito Acima",
        axis=1
    )

    st.subheader("üìå Vis√£o por Seguradora - Desvios do Markup Ideal")
    visao_seg = df_detalhado.copy()
    visao_seg["Fora da Pol√≠tica"] = visao_seg["Alerta"].isin(["‚ùå Muito Abaixo", "‚ö†Ô∏è Abaixo", "‚ö†Ô∏è Acima", "‚ùå Muito Acima"])
    resumo_seg = visao_seg.groupby("Seguradora").agg(
        Qtd_Produtos=("Produto", "count"),
        Qtd_Fora_Pol√≠tica=("Fora da Pol√≠tica", "sum")
    ).reset_index()
    resumo_seg["% Fora Pol√≠tica"] = resumo_seg["Qtd_Fora_Pol√≠tica"] / resumo_seg["Qtd_Produtos"]
    st.dataframe(resumo_seg.style.format({
        "Qtd_Produtos": "{:,.0f}",
        "Qtd_Fora_Pol√≠tica": "{:,.0f}",
        "% Fora Pol√≠tica": "{:.2%}"
    }), use_container_width=True)

    st.subheader("üö® Markups Fora da Pol√≠tica")
    fora = df_detalhado[df_detalhado["Alerta"].isin(["‚ùå Muito Abaixo", "‚ö†Ô∏è Abaixo", "‚ö†Ô∏è Acima", "‚ùå Muito Acima"])]
    st.dataframe(fora[["Seguradora", "Produto", "Segmento", "Itens", "Markup", "Markup Pol√≠tica", "Gap Markup", "Alerta"]].style.format({
        "Itens": "{:,.0f}",
        "Markup": lambda x: "---" if pd.isna(x) else f"{x:.2f}",
        "Markup Pol√≠tica": lambda x: "---" if pd.isna(x) else f"{x:.2f}",
        "Gap Markup": lambda x: "---" if pd.isna(x) else f"{x:.2f}"
    }), use_container_width=True)

    st.subheader("üîç An√°lise Detalhada")
    st.dataframe(
        df_detalhado.style.format({
            "Receita": "R$ {:,.2f}",
            "Despesa": "R$ {:,.2f}",
            "Itens": "{:,.0f}",
            "OS": "{:,.0f}",
            "Frequ√™ncia": "{:.2%}",
            "Sinistralidade": "{:.2%}",
            "Markup": lambda x: "---" if pd.isna(x) else f"{x:.2f}",
            "Markup Pol√≠tica": lambda x: "---" if pd.isna(x) else f"{x:.2f}",
            "Gap Markup": lambda x: "---" if pd.isna(x) else f"{x:.2f}"
        }),
        use_container_width=True
    )

    excel = exportar_excel(df_detalhado)
    st.download_button(
        label="üì• Baixar Excel (Markup)",
        data=excel,
        file_name="analise_markup.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

